# -*- coding: utf-8 -*-
"""Business Sales Transactions - EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OT75l1-Br6Lb_0vNiMVuuXjWroM_mTv0
"""

!unzip Business.zip

# Installing PySpark:
!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://archive.apache.org/dist/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
!tar xf spark-3.1.1-bin-hadoop3.2.tgz
!pip install -q findspark

# Installing PySpark:
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.1.1-bin-hadoop3.2"

# Installing PySpark:
import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()
spark.conf.set("spark.sql.repl.eagerEval.enabled", True) # Property used to format output tables better
spark

df = spark.read.csv('/content/Sales.csv', inferSchema=True,header=True)
df

spark.sql('Select Count(DISTINCT ProductName) from data')

spark.sql('Select Count(DISTINCT ProductNo) from data')

spark.sql('Select Count(DISTINCT Country) from data')

spark.sql('Select Date, Quantity from Data order by Quantity desc')

spark.sql('select * from data order by Quantity desc')

spark.sql('Select Date, Quantity, ProductName, Country from Data order by Quantity')

import pandas as pd

pd_df = df.toPandas()
pd_df.head()

pd_df = pd_df.drop(['ProductName'], axis = 1)

pd_df

Value = round(pd_df["Quantity"] * pd_df["Price"])
pd_df["Value"] = Value

transaction_df = pd_df.groupby(["TransactionNo"]).sum()

transaction_df

transaction_df = transaction_df.reset_index()

transaction_df

daily_tn = pd_df.groupby("Date").agg({"TransactionNo": pd.Series.nunique})
daily_tn = daily_tn.reset_index()
daily_tn

customers_df = pd_df.groupby("Date").agg({"CustomerNo" : pd.Series.nunique})
customers_df

customers_df.rename(columns = {'CustomerNo':'Customers'}, inplace = True)

customers_df = customers_df.reset_index()
customers_df

cancelled_df = pd_df.loc[pd_df.Quantity < 0]
cancelled_df

cancelled_prod = cancelled_df.groupby("Date").agg({"ProductNo": pd.Series.nunique})

cancelled_prod

cancelled_prod = cancelled_prod.reset_index()
cancelled_prod

cancelled_prods = cancelled_df.groupby("ProductNo").sum()
cancelled_prods

cancelled_prods['Quantity'] = cancelled_prods['Quantity'] * -1
cancelled_prods = cancelled_prods.reset_index()
cancelled_prods

import plotly.express as px

fig = px.line(daily_tn, x="Date", y="TransactionNo", title="Daily Transactions") 
fig.show()

fig = px.line(customers_df, x="Date", y="Customers", title="Daily Customers") 
fig.show()

fig = px.line(cancelled_prod, x="Date", y="ProductNo", title="Cancellation per Day") 
fig.show()

fig = px.pie(cancelled_prods, values='Quantity', names='ProductNo', title='Most Cancelled')
fig.update_traces(textinfo='none')
fig.show()